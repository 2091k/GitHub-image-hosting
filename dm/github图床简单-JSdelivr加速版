// 获取环境变量
const githubToken = GITHUB_TOKEN;
const repo = REPO;
const branch = BRANCH;
const filePath = FILE_PATH;

// 监听 fetch 事件
addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

// 处理请求的函数
async function handleRequest(request) {
  const { pathname } = new URL(request.url);

  if (pathname === '/') {
    return handleRootRequest(); // 返回 HTML 页面
  } else if (pathname === '/upload' && request.method === 'POST') {
    return handleUploadRequest(request); // 处理文件上传请求
  } else {
    return new Response('Not Found', { status: 404 });
  }
}

// 处理根路径请求的函数，返回 HTML 页面
function handleRootRequest() {
    const html = `
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>GitHub图床</title>
      <!-- Bootstrap CSS -->
      <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    </head>
    <body>
      <div class="container">
        <h1 class="mt-5">GitHub图床</h1>
        <form id="uploadForm">
          <div class="form-group">
            <label for="fileInput">选择文件：</label>
            <input type="file" id="fileInput" name="file" class="form-control-file">
          </div>
          <button type="submit" class="btn btn-primary">上传文件</button>
        </form>
  
        <div id="uploadingText" class="mt-3" style="display: none;">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">上传中...</span>
          </div>
          <span>文件上传中，请稍候...</span>
        </div>
  
        <div id="result" class="mt-3" style="display: none;">
          <h3 id="resultTitle"></h3>
          <p id="resultMessage"></p>
          <div id="uploadedImageContainer" style="display: none;">
            <h4>上传的图片：</h4>
            
            <p>图片 URL：<input type="text" id="imageUrl" class="form-control" readonly></p>
            <button id="copyImageUrlBtn" class="btn btn-secondary mt-2">复制 URL</button>
            <p class="mt-3">Markdown格式：<input type="text" id="markdownUrl" class="form-control" readonly></p>
            <button id="copyMarkdownBtn" class="btn btn-secondary mt-2">复制 Markdown</button></br>
            <img id="uploadedImage" src="" alt="Uploaded Image" style="max-width: 100%;">
          </div>
        </div>
      </div>
  
      <!-- jQuery -->
      <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
      <!-- Bootstrap JS -->
      <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
      
      <script>
        $(document).ready(function() {
          $('#uploadForm').on('submit', function(event) {
            event.preventDefault();
            uploadFile();
          });
  
          async function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            if (!file) {
              alert('请选择一个文件');
              return;
            }
  
            $('#uploadingText').show();
            $('#result').hide();
  
            const formData = new FormData();
            formData.append('file', file);
  
            try {
              const response = await fetch('/upload', {
                method: 'POST',
                body: formData
              });
  
              const result = await response.json();
              $('#uploadingText').hide();
  
              if (response.ok) {
                $('#resultTitle').text('上传成功！');
                $('#resultMessage').text('文件已成功上传到 GitHub。');
                $('#uploadedImage').attr('src', result.data);
                $('#imageUrl').val(result.data);
                $('#markdownUrl').val(\`![image](\${result.data})\`);
                $('#uploadedImageContainer').show();
              } else {
                $('#resultTitle').text('上传失败');
                $('#resultMessage').text(\`上传失败：\${result.error}\`);
                $('#uploadedImageContainer').hide();
              }
  
              $('#result').show();
            } catch (error) {
              $('#uploadingText').hide();
              $('#resultTitle').text('上传失败');
              $('#resultMessage').text(\`上传过程中出现错误：\${error.message}\`);
              $('#result').show();
              $('#uploadedImageContainer').hide();
            }
          }
  
          // 复制图片URL
          $('#copyImageUrlBtn').click(function() {
            const imageUrl = document.getElementById('imageUrl');
            imageUrl.select();
            document.execCommand('copy');
            alert('图片 URL 已复制');
          });
  
          // 复制Markdown
          $('#copyMarkdownBtn').click(function() {
            const markdownUrl = document.getElementById('markdownUrl');
            markdownUrl.select();
            document.execCommand('copy');
            alert('Markdown 已复制');
          });
        });
      </script>
    </body>
    <p style="font-size: 14px; text-align: center; position: fixed; bottom: 0; width: 100%; background: #f0f0f0; padding: 10px 0; border-top: 1px solid #ccc;">
    一叶知秋-魏无羡 GitHub - <a href="https://github.com/2091k/GitHub-image-hosting" target="_blank" rel="noopener noreferrer" style="color: #007bff; text-decoration: none;">2091k/GitHub-image-hosting</a>
  </p>
    </html>
    `;
    return new Response(html, { headers: { 'Content-Type': 'text/html;charset=UTF-8' } });
  }
  

// 处理上传请求的函数
async function handleUploadRequest(request) {
    try {
      const formData = await request.formData();
      const file = formData.get('file');
  
      if (!file) {
        throw new Error('Missing file');
      }
  
      const originalFileName = file.name;
      let fileName = originalFileName;
  
      // 1. 检查文件是否已经存在
      const checkUrl = `https://api.github.com/repos/${repo}/contents/${filePath}${fileName}?ref=${branch}`;
      const checkResponse = await fetch(checkUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Cloudflare Worker'
        }
      });
  
      if (checkResponse.ok) {
        // 如果文件存在，生成随机文件名
        const randomString = Array.from(crypto.getRandomValues(new Uint8Array(8)))
          .map(b => b.toString(16).padStart(2, '0')).join('');
        fileName = `${randomString}.${fileName.split('.').pop()}`;
      }
  
      // 2. 准备上传文件
      const fileStream = file.stream();
      const reader = fileStream.getReader();
      let fileContent = '';
      let done = false;
  
      // Convert file content to base64 in chunks
      while (!done) {
        const { value, done: readerDone } = await reader.read();
        done = readerDone;
        if (value) {
          fileContent += String.fromCharCode(...new Uint8Array(value));
        }
      }
  
      const base64Content = btoa(fileContent);
      const uploadUrl = `https://api.github.com/repos/${repo}/contents/${filePath}${fileName}`;
  
      const uploadData = {
        message: `上传图片: ${fileName}`,
        content: base64Content,
        branch: branch
      };
  
      const uploadResponse = await fetch(uploadUrl, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${githubToken}`,
          'Content-Type': 'application/json',
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Cloudflare Worker'
        },
        body: JSON.stringify(uploadData)
      });
  
      const responseText = await uploadResponse.text();
      const jsonResponse = JSON.parse(responseText);
  
      if (uploadResponse.ok) {
        // 使用 jsDelivr URL 作为图片链接
        const imageUrl = `https://fastly.jsdelivr.net/gh/${repo}@${branch}/${filePath}${fileName}`;
        return new Response(JSON.stringify({ data: imageUrl }), {
          status: 201,
          headers: { 'Content-Type': 'application/json' }
        });
      } else {
        console.error('GitHub upload failed:', responseText);
        return new Response(JSON.stringify({ error: 'GitHub upload failed', details: responseText }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    } catch (error) {
      console.error('Internal Server Error:', error.message);
      return new Response(JSON.stringify({ error: 'Internal Server Error', message: error.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }
  